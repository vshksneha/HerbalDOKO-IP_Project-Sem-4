// Generated by view binder compiler. Do not edit!
package com.android.onlineshoppingapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.android.onlineshoppingapp.R;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BottomSheetLayoutChangepassBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button bottomSheetChangePassBtn;

  @NonNull
  public final ImageView bottomSheetChangePassClose;

  @NonNull
  public final TextInputEditText bottomSheetChangePassNewPass;

  @NonNull
  public final TextInputEditText bottomSheetChangePassOldPass;

  @NonNull
  public final TextInputEditText bottomSheetChangePassReNewPass;

  @NonNull
  public final LinearLayout bottomSheetLayoutChangepass;

  @NonNull
  public final TextInputLayout layoutBottomSheetChangePassNewPass;

  @NonNull
  public final TextInputLayout layoutBottomSheetChangePassOldPass;

  @NonNull
  public final TextInputLayout layoutBottomSheetChangePassReNewPass;

  private BottomSheetLayoutChangepassBinding(@NonNull LinearLayout rootView,
      @NonNull Button bottomSheetChangePassBtn, @NonNull ImageView bottomSheetChangePassClose,
      @NonNull TextInputEditText bottomSheetChangePassNewPass,
      @NonNull TextInputEditText bottomSheetChangePassOldPass,
      @NonNull TextInputEditText bottomSheetChangePassReNewPass,
      @NonNull LinearLayout bottomSheetLayoutChangepass,
      @NonNull TextInputLayout layoutBottomSheetChangePassNewPass,
      @NonNull TextInputLayout layoutBottomSheetChangePassOldPass,
      @NonNull TextInputLayout layoutBottomSheetChangePassReNewPass) {
    this.rootView = rootView;
    this.bottomSheetChangePassBtn = bottomSheetChangePassBtn;
    this.bottomSheetChangePassClose = bottomSheetChangePassClose;
    this.bottomSheetChangePassNewPass = bottomSheetChangePassNewPass;
    this.bottomSheetChangePassOldPass = bottomSheetChangePassOldPass;
    this.bottomSheetChangePassReNewPass = bottomSheetChangePassReNewPass;
    this.bottomSheetLayoutChangepass = bottomSheetLayoutChangepass;
    this.layoutBottomSheetChangePassNewPass = layoutBottomSheetChangePassNewPass;
    this.layoutBottomSheetChangePassOldPass = layoutBottomSheetChangePassOldPass;
    this.layoutBottomSheetChangePassReNewPass = layoutBottomSheetChangePassReNewPass;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BottomSheetLayoutChangepassBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BottomSheetLayoutChangepassBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.bottom_sheet_layout_changepass, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BottomSheetLayoutChangepassBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomSheetChangePassBtn;
      Button bottomSheetChangePassBtn = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheetChangePassBtn == null) {
        break missingId;
      }

      id = R.id.bottomSheetChangePassClose;
      ImageView bottomSheetChangePassClose = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheetChangePassClose == null) {
        break missingId;
      }

      id = R.id.bottomSheetChangePassNewPass;
      TextInputEditText bottomSheetChangePassNewPass = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheetChangePassNewPass == null) {
        break missingId;
      }

      id = R.id.bottomSheetChangePassOldPass;
      TextInputEditText bottomSheetChangePassOldPass = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheetChangePassOldPass == null) {
        break missingId;
      }

      id = R.id.bottomSheetChangePassReNewPass;
      TextInputEditText bottomSheetChangePassReNewPass = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheetChangePassReNewPass == null) {
        break missingId;
      }

      LinearLayout bottomSheetLayoutChangepass = (LinearLayout) rootView;

      id = R.id.layout_bottomSheetChangePassNewPass;
      TextInputLayout layoutBottomSheetChangePassNewPass = ViewBindings.findChildViewById(rootView, id);
      if (layoutBottomSheetChangePassNewPass == null) {
        break missingId;
      }

      id = R.id.layout_bottomSheetChangePassOldPass;
      TextInputLayout layoutBottomSheetChangePassOldPass = ViewBindings.findChildViewById(rootView, id);
      if (layoutBottomSheetChangePassOldPass == null) {
        break missingId;
      }

      id = R.id.layout_bottomSheetChangePassReNewPass;
      TextInputLayout layoutBottomSheetChangePassReNewPass = ViewBindings.findChildViewById(rootView, id);
      if (layoutBottomSheetChangePassReNewPass == null) {
        break missingId;
      }

      return new BottomSheetLayoutChangepassBinding((LinearLayout) rootView,
          bottomSheetChangePassBtn, bottomSheetChangePassClose, bottomSheetChangePassNewPass,
          bottomSheetChangePassOldPass, bottomSheetChangePassReNewPass, bottomSheetLayoutChangepass,
          layoutBottomSheetChangePassNewPass, layoutBottomSheetChangePassOldPass,
          layoutBottomSheetChangePassReNewPass);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
