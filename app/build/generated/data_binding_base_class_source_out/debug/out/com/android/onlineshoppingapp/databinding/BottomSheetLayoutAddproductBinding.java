// Generated by view binder compiler. Do not edit!
package com.android.onlineshoppingapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.android.onlineshoppingapp.R;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BottomSheetLayoutAddproductBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView bottomSheetAddProductClose;

  @NonNull
  public final TextInputEditText bottomSheetAddProductDescription;

  @NonNull
  public final TextInputEditText bottomSheetAddProductName;

  @NonNull
  public final TextInputEditText bottomSheetAddProductPrice;

  @NonNull
  public final TextInputEditText bottomSheetAddProductQuantity;

  @NonNull
  public final LinearLayout bottomSheetLayoutAddproduct;

  @NonNull
  public final Button btnAddImage;

  @NonNull
  public final Button btnBottomSheetAddProduct;

  @NonNull
  public final TextInputLayout layoutBottomSheetAddProductDescription;

  @NonNull
  public final TextInputLayout layoutBottomSheetAddProductName;

  @NonNull
  public final TextInputLayout layoutBottomSheetAddProductPrice;

  @NonNull
  public final TextInputLayout layoutBottomSheetAddProductQuantity;

  @NonNull
  public final TextInputLayout layoutCategory;

  @NonNull
  public final RecyclerView rvImages;

  @NonNull
  public final AutoCompleteTextView tvCategory;

  private BottomSheetLayoutAddproductBinding(@NonNull LinearLayout rootView,
      @NonNull ImageView bottomSheetAddProductClose,
      @NonNull TextInputEditText bottomSheetAddProductDescription,
      @NonNull TextInputEditText bottomSheetAddProductName,
      @NonNull TextInputEditText bottomSheetAddProductPrice,
      @NonNull TextInputEditText bottomSheetAddProductQuantity,
      @NonNull LinearLayout bottomSheetLayoutAddproduct, @NonNull Button btnAddImage,
      @NonNull Button btnBottomSheetAddProduct,
      @NonNull TextInputLayout layoutBottomSheetAddProductDescription,
      @NonNull TextInputLayout layoutBottomSheetAddProductName,
      @NonNull TextInputLayout layoutBottomSheetAddProductPrice,
      @NonNull TextInputLayout layoutBottomSheetAddProductQuantity,
      @NonNull TextInputLayout layoutCategory, @NonNull RecyclerView rvImages,
      @NonNull AutoCompleteTextView tvCategory) {
    this.rootView = rootView;
    this.bottomSheetAddProductClose = bottomSheetAddProductClose;
    this.bottomSheetAddProductDescription = bottomSheetAddProductDescription;
    this.bottomSheetAddProductName = bottomSheetAddProductName;
    this.bottomSheetAddProductPrice = bottomSheetAddProductPrice;
    this.bottomSheetAddProductQuantity = bottomSheetAddProductQuantity;
    this.bottomSheetLayoutAddproduct = bottomSheetLayoutAddproduct;
    this.btnAddImage = btnAddImage;
    this.btnBottomSheetAddProduct = btnBottomSheetAddProduct;
    this.layoutBottomSheetAddProductDescription = layoutBottomSheetAddProductDescription;
    this.layoutBottomSheetAddProductName = layoutBottomSheetAddProductName;
    this.layoutBottomSheetAddProductPrice = layoutBottomSheetAddProductPrice;
    this.layoutBottomSheetAddProductQuantity = layoutBottomSheetAddProductQuantity;
    this.layoutCategory = layoutCategory;
    this.rvImages = rvImages;
    this.tvCategory = tvCategory;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BottomSheetLayoutAddproductBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BottomSheetLayoutAddproductBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.bottom_sheet_layout_addproduct, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BottomSheetLayoutAddproductBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomSheetAddProductClose;
      ImageView bottomSheetAddProductClose = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheetAddProductClose == null) {
        break missingId;
      }

      id = R.id.bottomSheetAddProductDescription;
      TextInputEditText bottomSheetAddProductDescription = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheetAddProductDescription == null) {
        break missingId;
      }

      id = R.id.bottomSheetAddProductName;
      TextInputEditText bottomSheetAddProductName = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheetAddProductName == null) {
        break missingId;
      }

      id = R.id.bottomSheetAddProductPrice;
      TextInputEditText bottomSheetAddProductPrice = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheetAddProductPrice == null) {
        break missingId;
      }

      id = R.id.bottomSheetAddProductQuantity;
      TextInputEditText bottomSheetAddProductQuantity = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheetAddProductQuantity == null) {
        break missingId;
      }

      LinearLayout bottomSheetLayoutAddproduct = (LinearLayout) rootView;

      id = R.id.btnAddImage;
      Button btnAddImage = ViewBindings.findChildViewById(rootView, id);
      if (btnAddImage == null) {
        break missingId;
      }

      id = R.id.btnBottomSheetAddProduct;
      Button btnBottomSheetAddProduct = ViewBindings.findChildViewById(rootView, id);
      if (btnBottomSheetAddProduct == null) {
        break missingId;
      }

      id = R.id.layout_bottomSheetAddProductDescription;
      TextInputLayout layoutBottomSheetAddProductDescription = ViewBindings.findChildViewById(rootView, id);
      if (layoutBottomSheetAddProductDescription == null) {
        break missingId;
      }

      id = R.id.layout_bottomSheetAddProductName;
      TextInputLayout layoutBottomSheetAddProductName = ViewBindings.findChildViewById(rootView, id);
      if (layoutBottomSheetAddProductName == null) {
        break missingId;
      }

      id = R.id.layout_bottomSheetAddProductPrice;
      TextInputLayout layoutBottomSheetAddProductPrice = ViewBindings.findChildViewById(rootView, id);
      if (layoutBottomSheetAddProductPrice == null) {
        break missingId;
      }

      id = R.id.layout_bottomSheetAddProductQuantity;
      TextInputLayout layoutBottomSheetAddProductQuantity = ViewBindings.findChildViewById(rootView, id);
      if (layoutBottomSheetAddProductQuantity == null) {
        break missingId;
      }

      id = R.id.layoutCategory;
      TextInputLayout layoutCategory = ViewBindings.findChildViewById(rootView, id);
      if (layoutCategory == null) {
        break missingId;
      }

      id = R.id.rvImages;
      RecyclerView rvImages = ViewBindings.findChildViewById(rootView, id);
      if (rvImages == null) {
        break missingId;
      }

      id = R.id.tvCategory;
      AutoCompleteTextView tvCategory = ViewBindings.findChildViewById(rootView, id);
      if (tvCategory == null) {
        break missingId;
      }

      return new BottomSheetLayoutAddproductBinding((LinearLayout) rootView,
          bottomSheetAddProductClose, bottomSheetAddProductDescription, bottomSheetAddProductName,
          bottomSheetAddProductPrice, bottomSheetAddProductQuantity, bottomSheetLayoutAddproduct,
          btnAddImage, btnBottomSheetAddProduct, layoutBottomSheetAddProductDescription,
          layoutBottomSheetAddProductName, layoutBottomSheetAddProductPrice,
          layoutBottomSheetAddProductQuantity, layoutCategory, rvImages, tvCategory);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
